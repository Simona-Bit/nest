代码1：
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int x0 = in.nextInt();
        in.close();
        int count = 0;
        while (x0 != 0 && count <= 300000) {
            x0 = ((x0 << 1) + 1) % 1000000007;
            count++;
        }
        int res = (count + 2) / 3;
        System.out.println(res > 100000 ? -1 : res);
    }
}
代码2：
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Scanner;
public class Main{
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while(in.hasNext()){
            int x=in.nextInt();
            Map<Long, Integer> map=new HashMap<Long, Integer>();
            Queue<Long> queue=new LinkedList<Long>();
            queue.offer((long)x);
            map.put((long)x, 1); 
            while(!queue.isEmpty()){
                long n=queue.poll();
                if(n==0) {
                    System.out.println(map.get(n)-1);
                    return;
                }
                if(map.get(n)>=100001)
                    continue;
                if(!map.containsKey((4*n+3)%1000000007)){
                    map.put((4*n+3)%1000000007, map.get(n)+1);
                    queue.offer((4*n+3)%1000000007);
                }
                if(!map.containsKey((8*n+7)%1000000007)){
                    map.put((8*n+7)%1000000007, map.get(n)+1);
                    queue.offer((8*n+7)%1000000007);
                }
            }
            System.out.println(-1);
        }
    }
}

代码3：
思路：
（1）4x+3和8x+7的数学操作，可以用二进制的左移和补1表示；
（2）y = 4*x+3,相当于x的二进制左移2位，然后空位补1，即原先x的二进制为#####,则y的二进制为#####11；
（3）y = 8*x+3,相当于y的二进制左移3位，然后空位补1，即原先x的二进制为#####,则y的二进制为#####111；
（4）小易的移动，最终可以表达成4x+3操作进行了m次，8x+7操作进行了n次；
（5）4*x+3操作进行m次，则x的二进制后面增加2m个1；
（6）8*x+7操作进行n次，则x的二进制后面增加了3n个1；
（7）小易的移动，最终可以表达为：x的二进制后面增加了（2m+3n）个1；
（8）移动的顺序对其到达没有影响；
（9）小易移动次数的分析：
初始位置为0，则直接满足，需移动0次；初始位置不为0，则记times = （2m+3n）,m取1到10_0000,n取1到10_0000；所以，times的取值范围为[2,30_0000]。即：最多30_0000次搜索，就能获得结果。由于幂次操作数值过大，需要作出变换。
import java.util.Scanner;

/**
 * Created by Halley on 2017/8/11.
 */
public class Main {
    public static final long LIMIT = 300000;//最多搜索次数
    public static final long N = 1000000007;//求余

    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        while(sc.hasNext()) {
            System.out.println(sol(sc.nextLong()));
        }
    }

    //次数判定方法
    public static long sol(long in){
        //如果初始位置为0，则直接可行，返回0次
        if(in == 0){
            return 0L ;
        }else{//初始位置不为0，则开始搜索
            return search(in);
        }
    }
    //不为0时的搜索
    public static long search(long in){//参数：初始坐标
        long temp = in;
        //遍历，获取最小位移
        for(int i=1;i<=LIMIT;i++){
            //long temp = (in+1)*(long)Math.pow(2,i)-1;//当循环较大时，幂次太高，数字超出范围，报错
            //递推
            temp = (temp * 2 + 1 ) % N;
            if( temp % N == 0 ){
                //i是符合条件的最小偏移，然后对其进行分解
                for(int j =0;j<=(i / 2);j++){//j对应a值
                    if((i - 2*j) % 3 == 0){
                        return ((i+j)/3);
                    }
                }
            }
        }
        //超过最大次数还没匹配，则输出-1
        return -1L;
    }
}