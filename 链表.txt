// 1、无头单向非循环链表实现
public interface ILinked {
??//头插法
??void addFirst(int data);
??//尾插法
??void addLast(int data);
??//任意位置插入,第一个数据节点为0号下标
??boolean addindex(int index,int data);
??//查找是否包含关键字key是否在单链表当中
??boolean contains(int key);
??//删除第一次出现关键字为key的节点
3.3 链表面试题
1. 删除链表中等于给定值?val?的所有节点。 OJ链接
??int remove(int key);
??//删除所有值为key的节点
??void removeAllKey(int key);
??//得到单链表的长度
??int getLength();
??void display();
??void clear();
}
//2、带头循环单链表实现
public interface ICLinked {
??//头插法
??void addFirst(int data);
??//尾插法
??void addLast(int data);
??//任意位置插入,第一个数据节点为0号下标
??boolean addindex(int index,int data);
??//查找是否包含关键字key是否在单链表当中
??boolean contains(int key);
??//删除第一次出现关键字为key的节点
??int remove(int key);
??//删除所有值为key的节点
??void removeAllKey(int key);
??//得到单链表的长度
??int getLength();
??void display();
??void clear();
}
// 3、不带头双向链表实现
public interface IDoubleLinked {
??//头插法
??void addFirst(int data);
??//尾插法
??void addLast(int data);
??//任意位置插入,第一个数据节点为0号下标
??boolean addindex(int index,int data);
??//查找是否包含关键字key是否在单链表当中
??boolean contains(int key);
??//删除第一次出现关键字为key的节点
??int remove(int key);
??//删除所有值为key的节点
??void removeAllKey(int key);
??//得到单链表的长度
??int getLength();
??void display();
??void clear();
}